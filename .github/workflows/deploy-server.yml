name: Deploy Server

on:
  push:
    branches:
      - main
  workflow_call:
    inputs:
      channel:
        required: true
        type: string
      ref:
        required: true
        type: string
  workflow_dispatch:

env:
  CHANNEL: ${{ inputs.channel || github.ref_name }}

concurrency:
  group: "deploy-server-${{ inputs.channel || github.ref_name }}"
  cancel-in-progress: false

jobs:
  build:
    if: github.event_name == 'push' || github.event_name == 'repository_dispatch'
    uses: ./.github/workflows/build-nix.yml
    with:
      ref: ${{ inputs.ref || github.ref }}
      attr: x86_64-linux.unavi-server

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ inputs.ref || github.ref }}

      - uses: hashicorp/setup-terraform@v1

      - name: Apply Terraform
        run: |
          cd deployments/terraform
          terraform init
          terraform workspace select -or-create ${{ env.CHANNEL }}
          terraform apply -auto-approve

      - name: Get artifact download URL
        run: |
          ARTIFACT_NAME="build-x86_64-linux.unavi-server"
          REPO_NAME="${{ github.repository }}"
          RUN_ID="${{ github.run_id }}"

          # Use GitHub API to list artifacts
          ARTIFACTS_URL="https://api.github.com/repos/$REPO_NAME/actions/runs/$RUN_ID/artifacts"
          ARTIFACTS_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $ARTIFACTS_URL)

          # Parse JSON to get the download URL of the specific artifact
          url=$(echo $ARTIFACTS_JSON | jq -r --arg ARTIFACT_NAME "$ARTIFACT_NAME" '.artifacts[] | select(.name==$ARTIFACT_NAME) | .archive_download_url')

          echo "URL: $url"
          echo "URL=$url" >> $GITHUB_ENV

      - uses: actions/download-artifact@v4
        with:
          name: build-x86_64-linux.unavi-server

      - name: Get artifact SHA
        run: |
          sha=$(sha256sum x86_64-linux.unavi-server.zip | cut -d ' ' -f 1)
          echo "SHA: $sha"
          echo "SHA=$sha" >> $GITHUB_ENV

      - name: Update Nix file
        run: |
          sed -i 's|placeholder-url|'"$URL"'|g' deployments/nix/unavi-server.nix
          sed -i 's|placeholder-sha|'"$SHA"'|g' deployments/nix/unavi-server.nix

      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Morph deploy
        run: |
          cd deployments/nix
          sh show.sh
          nix develop -c morph deploy network.nix switch
