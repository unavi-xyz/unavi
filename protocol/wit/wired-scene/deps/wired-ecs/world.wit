//! Entity component system (ECS) for The Wired.

package wired:ecs;

interface types {
  type entity-id = u64;
  type component-id = u32;
  type system-id = u32;

  enum primitive {
    %bool,
    %f32,
    %f64,
    %i8,
    %i16,
    %i32,
    %i64,
    %u8,
    %u16,
    %u32,
    %u64,
    %string,
  }

  variant component-type {
    map(tuple<primitive, primitive>),
    primitive(primitive),
    vec(primitive),
  }

  record component {
    /// A unique string for the component.
    /// If the component is a WIT type, `key` is assumed to be the type path (`namespace:package/path/to/type`).
    key: string,
    types: list<component-type>,
  }

  variant constraint {
    with-component(component-id),
    without-component(component-id),
  }

  /// A view into ECS data.
  ///
  /// Queries data for all entities that have `components` and
  /// conform to `constraints`.
  record query {
    components: list<component-id>,
    constraints: list<constraint>
  }

  variant param {
    query(query)
  }

  record query-data {
    ents: list<entity-id>,
    data: list<list<u8>>,
  }

  variant param-data {
    query(query-data)
  }

  enum schedule {
    /// Runs once when the script starts.
    startup,
    /// Runs every render frame.
    /// For most logic, consider using `update` instead.
    render,
    /// Runs at a fixed interval.
    update,
  }

  /// A system is function that gets called with requested param data.
  /// The system will be executed whenever the schedule activates.
  record system {
    schedule: schedule,
    params: list<param>,
  }
}

interface host-api {
  use types.{
    component,
    component-id,
    entity-id,
    system,
    system-id,
  };

  /// Registers a component.
  ///
  /// If the component key has already been registered, the same id will be returned.
  /// This provides an interface for sharing ECS components across WASM components.
  register-component: func(component: component) -> result<component-id, string>;
  /// Registers a system.
  register-system: func(system: system) -> result<system-id, string>;

  enum system-order {
    after,
    before
  }

  /// Sets constraints for system execution.
  order-systems: func(a: system-id, order: system-order, b: system-id) -> result<_, string>;

  /// Spawns an entity.
  spawn: func() -> result<entity-id, string>;
  /// Despawns an entity.
  despawn: func(entity: entity-id) -> result<_, string>;

  /// Inserts a component to an entity, overwriting any data if the component is already added.
  insert-component: func(entity: entity-id, component: component-id, data: list<u8>) -> result<_, string>;
  /// Writes to a component, if it exists on the entity.
  write-component: func(entity: entity-id, component: component-id, data: list<u8>) -> result<_, string>;
  /// Removes a component from an entity.
  remove-component: func(entity: entity-id, component: component-id) -> result<_, string>;
}

interface guest-api {
  use types.{entity-id, system-id, param-data};

  resource script {
    constructor();
    exec-system: func(id: system-id, data: list<param-data>);
  }
}

world host {
  import host-api;
  export host-api;
}


world guest {
  import host-api;
  export guest-api;
}
