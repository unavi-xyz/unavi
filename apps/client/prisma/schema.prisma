generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// A space NFT created from the client will point to the S3 bucket of a publication
// This makes the NFT metadata mutable, so that the NFT can be updated
// without having to send a new transaction and update the NFT uri
model Publication {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   String? @db.Char(42)
  spaceId Int?

  PublishedModel PublishedModel?

  Projects Project[]
}

// A published model is a model that has been published to the S3 bucket of a publication
// It has a unique id and is immutable (so it can be cached)
// To update the model, a new PublishedModel is created, and the publication metadata is updated
model PublishedModel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Publication   Publication @relation(fields: [publicationId], references: [id])
  publicationId String      @unique

  @@index([publicationId])
}

// A project can be linked to a publication,
// allowing the user to push updates to the publication from the project
model Project {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner String @db.Char(42)

  name        String @db.VarChar(80)
  description String @db.VarChar(1200)

  Publication   Publication? @relation(fields: [publicationId], references: [id])
  publicationId String?

  ProjectAsset ProjectAsset[]

  @@index([publicationId])
}

// A project asset is a file that is uploaded to the project S3 bucket
model ProjectAsset {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  @@index([projectId])
}

// Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
